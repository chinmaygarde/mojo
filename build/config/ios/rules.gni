# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

ios_app_script = "//build/config/ios/ios_app.py"

# Code signs an iOS application bundle
#
# Variables
#   entitlements_path: The path to the entitlements .xcent file
#   identity: The code signing identity
#   application_path: The application to code sign
#   deps: The dependencies of this target
#
# Example
#   code_sign_ios("foo_sign") {
#     entitlements_path = "entitlements.xcent"
#     identity = "ABCXYZ"
#     application_path = "path/to/application.app"
#     deps = [ ... ]
#   }
template("code_sign_ios") {
  assert(defined(invoker.entitlements_path),
         "The path to the entitlements .xcent file must be specified")
  assert(defined(invoker.identity),
         "The code signing identity must be specified")
  assert(defined(invoker.application_path),
         "The application to code sign must be specified")
  assert(defined(invoker.deps))

  action(target_name) {
    sources = [
      invoker.entitlements_path,
    ]

    script = ios_app_script

    outputs = [
      invoker.application_path + "/_CodeSignature/CodeResources",
    ]

    args = [
      "codesign",
      "-p",
      rebase_path(invoker.application_path, root_build_dir),
      "-i",
      invoker.identity,
      "-e",
      rebase_path(invoker.entitlements_path, root_build_dir),
    ]

    deps = invoker.deps
  }
}

# Copies resources into the iOS application bundle
#
# Variables
#   resources: The source list of resources to copy over
#   bundle_directory: The directory within the bundle to place the resources in
#   app_name: The name of the application
#
# Example
#   resource_copy_ios("icu_resources") {
#     resources = [ "//third_party/icu/ios/icudtl.dat" ]
#     bundle_directory = "."
#   }
template("resource_copy_ios") {
  assert(defined(invoker.resources),
         "The source list of resources to copy over must be specified")
  assert(defined(invoker.bundle_directory),
         "The directory to place the resources in must be specified")
  assert(defined(invoker.app_name),
         "The name of the application must be specified")

  _bundle_directory = invoker.bundle_directory
  _app_name = invoker.app_name
  _resources = invoker.resources

  copy(target_name) {
    set_sources_assignment_filter([])
    sources = _resources
    outputs = [
      "$root_build_dir/$_app_name.app/$_bundle_directory/{{source_file_part}}",
    ]
  }
}

# Creates an iOS application bundle. Performs resource copying and code
# signing.
#
# Variables
#   info_plist: The application plist file name
#   app_name: The name of the application bundle
#   entitlements_path: The path to the entitlements .xcent file
#   code_signing_identity: The code signing identity to use
#   deps: the dependencies of this target
#
# Example
#   ios_app("Sky") {
#     app_name = "Sky"
#     info_plist = "ios/Info.plist"
#     entitlements_path = "ios/Entitlements.xcent"
#     code_signing_identity = "AABBCC"
#     deps = [ ... ]
#   }
template("ios_app") {
  assert(defined(invoker.deps),
         "Dependencies must be specified for $target_name")
  assert(defined(invoker.info_plist),
         "The application plist file must be specified for $target_name")
  assert(defined(invoker.app_name),
         "The name of iOS application for $target_name")
  assert(defined(invoker.entitlements_path),
         "The entitlements path must be specified for $target_name")
  assert(defined(invoker.code_signing_identity),
         "The entitlements path must be specified for $target_name")

  # We just create a variable so we can use the same in interpolation
  app_name = invoker.app_name

  # Generate the project structure

  struct_gen_target_name = target_name + "_struct"
  copy_gen_target_name = target_name + "_copy"
  code_sign_gen_target_name = target_name + "_codesign"
  final_target_name = target_name

  action(struct_gen_target_name) {
    visibility = [ ":$copy_gen_target_name" ]

    script = ios_app_script

    sources = []
    outputs = [
      "$root_build_dir/$app_name.app",
    ]

    args = [
      "structure",
      "-d",
      rebase_path(root_build_dir),
      "-n",
      app_name,
    ]
  }

  # Generate the executable

  bin_gen_target_name = target_name + "_bin"

  executable(bin_gen_target_name) {
    libs = [
      "UIKit.framework",
      "QuartzCore.framework",
      "OpenGLES.framework",
    ]
    deps = invoker.deps
    output_name = app_name
  }

  # Process the Info.plist

  plist_gen_target_name = target_name + "_plist"

  action(plist_gen_target_name) {
    visibility = [ ":$copy_gen_target_name" ]

    script = ios_app_script

    sources = [
      invoker.info_plist,
    ]
    outputs = [
      "$root_build_dir/Info.plist",
    ]

    args = [
      "plist",
      "-i",
      rebase_path(invoker.info_plist, root_build_dir),
      "-o",
      rebase_path(root_build_dir),
    ]
  }

  # Copy the generated binaries and assets to their appropriate locations

  copy(copy_gen_target_name) {
    visibility = [ ":$code_sign_gen_target_name" ]

    sources = [
      "$root_build_dir/$app_name",
      "$root_build_dir/Info.plist",
    ]

    outputs = [
      "$root_build_dir/$app_name.app/{{source_file_part}}",
    ]

    deps = [
      ":$struct_gen_target_name",
      ":$bin_gen_target_name",
      ":$plist_gen_target_name",
    ]
  }

  # Perform Code Signing

  code_sign_ios(code_sign_gen_target_name) {
    entitlements_path = invoker.entitlements_path
    identity = invoker.code_signing_identity
    application_path = "$root_build_dir/$app_name.app"
    deps = [
      ":$copy_gen_target_name",
    ]
  }

  # Top level group

  group(final_target_name) {
    if (defined(invoker.visibility)) {
      visibility = invoker.visibility
    }

    # Skip code signing if no identity is provided. This is useful for simulator
    # builds
    deps = []
    if (invoker.code_signing_identity == "") {
      deps += [ ":$copy_gen_target_name" ]
    } else {
      deps += [ ":$code_sign_gen_target_name" ]
    }
  }
}
